print(duplicates)
# Handle duplicates if necessary (e.g., remove or aggregate)
timeseries <- timeseries %>%
group_by(date) %>%
summarise(cases = sum(cases, na.rm = TRUE))
# Convert to tsibble
timeseries_tsibble <- timeseries %>%
as_tsibble(index = date)
# Fill gaps in the time series
timeseries_tsibble <- timeseries_tsibble %>%
fill_gaps()
# Check the structure of the tsibble
print(timeseries_tsibble)
# Apply the classical decomposition model
decomposed_model <- timeseries_tsibble %>%
model(classical_decomposition(cases, type = "additive"))
# Check if the model fitting resulted in a null model
print(decomposed_model)
# Extract components and plot if the model is not null
if (!is.null(decomposed_model)) {
components <- decomposed_model %>%
components()
# Check the structure of the components
print(components)
# Generate the plot
autoplot(components)
} else {
print("Model fitting failed. Please check your data and the model specification.")
}
timeseries %>%
## keep the variables we are interested
select(date, cases, m_precip) %>%
## change your data in to long format
pivot_longer(
## use epiweek as your key
!date,
## move column names to the new "measure" column
names_to = "measure",
## move cell values to the new "values" column
values_to = "value") %>%
## create a plot with the dataset above
## plot epiweek on the x axis and values (counts/celsius) on the y
ggplot(aes(x = date, y = value)) +
## create a separate plot for temperate and case counts
## let them set their own y-axes
facet_grid(measure ~ ., scales = "free_y") +
## plot both as a line
geom_line() + theme_bw()
timeseries %>%
## keep the variables we are interested
select(date, cases, m_precip) %>%
## change your data in to long format
pivot_longer(
## use epiweek as your key
!date,
## move column names to the new "measure" column
names_to = "measure",
## move cell values to the new "values" column
values_to = "value") %>%
## create a plot with the dataset above
## plot epiweek on the x axis and values (counts/celsius) on the y
ggplot(aes(x = date, y = value)) +
## create a separate plot for temperate and case counts
## let them set their own y-axes
facet_grid(measure ~ ., scales = "free_y") +
## plot both as a line
geom_line() + theme_bw()
timeseries %>%
## keep the variables we are interested
select(date, cases, m_precip) %>%
## change your data in to long format
pivot_longer(
## use epiweek as your key
!date,
## move column names to the new "measure" column
names_to = "measure",
## move cell values to the new "values" column
values_to = "value") %>%
## create a plot with the dataset above
## plot epiweek on the x axis and values (counts/celsius) on the y
ggplot(aes(x = date, y = value)) +
## create a separate plot for temperate and case counts
## let them set their own y-axes
facet_grid(measure ~ ., scales = "free_y") +
## plot both as a line
geom_line(colour="red") + theme_bw()
mdata %>%
## keep the variables we are interested
select(month, cases, m_temp) %>%
## change your data in to long format
pivot_longer(
## use epiweek as your key
!month,
## move column names to the new "measure" column
names_to = "measure",
## move cell values to the new "values" column
values_to = "value") %>%
## create a plot with the dataset above
## plot epiweek on the x axis and values (counts/celsius) on the y
ggplot(aes(x = month, y = value)) +
## create a separate plot for temperate and case counts
## let them set their own y-axes
facet_grid(measure ~ ., scales = "free_y") +
## plot both as a line
geom_point() + geom_line()
pacman::p_load(
rio,
here,
dplyr,
epikit,
forcats,
readr,
styler,
tidyverse,
janitor,
ggplot2,
corrr,
gtsummary,
broom,
kableExtra,
corrplot,
Hmisc,
flextable,
officer
)
#Importing and viewing data------------------------------------------------------------------------
library(readxl)
monthly_data <- read_excel("mlfdata.xlsx")
View(monthly_data)
glimpse(monthly_data)
install.packages("pacman")
#Install libraries for data transformation
pacman::p_load(
rio,
here,
dplyr,
epikit,
forcats,
readr,
styler,
tidyverse,
janitor,
ggplot2,
corrr,
gtsummary,
broom,
kableExtra,
corrplot,
Hmisc,
flextable,
officer
)
library(readxl)
monthly_data <- read_excel("mlfdata.xlsx")
View(monthly_data)
glimpse(monthly_data)
mdata <- monthly_data %>%
clean_names() %>%
rename( m_tempmax = tempmax,
m_tempmin = tempmin,
m_temp = temp,
m_humid = humidity,
m_precip = precip,
m_precov = precipcover)
mdata$state <- as.factor(mdata$state)
mdata$year <- as.factor(mdata$year)
mdata$cases <- as.numeric(mdata$cases)
mdata$month <- as.factor(mdata$month)
glimpse(mdata)
View(mdata)
table <- mdata %>%
# Get summary values per hospital-outcome group
###############################################
group_by(state, year) %>%                      # Group data
summarise(                                           # Create new summary columns of indicators of interest
N = n(),                                            # Number of rows per hospital-outcome group
case_value = mean(cases)) %>%           # median CT value per group
# add totals
############
bind_rows(                                           # Bind the previous table with this mini-table of totals
mdata %>%
filter(!is.na(state) & year != "Missing") %>%
group_by(state) %>%                            # Grouped only by outcome, not by hospital
summarise(
N = n(),                                       # Number of rows for whole dataset
case_value = mean(cases))) %>%     # Median CT for whole dataset
# Pivot wider and format
########################
mutate(year = replace_na(year, "Total")) %>%
pivot_wider(                                         # Pivot from long to wide
values_from = c(case_value, N),                       # new values are from ct and count columns
names_from = state) %>%                           # new column names are from outcomes
# Arrange rows from lowest to highest (Total row at bottom)
table  # print
table <- mdata %>%
# Get summary values per hospital-outcome group
###############################################
group_by(state, year) %>%                      # Group data
summarise(                                           # Create new summary columns of indicators of interest
N = n(),                                            # Number of rows per hospital-outcome group
case_value = mean(cases)) %>%           # median CT value per group
# add totals
############
bind_rows(                                           # Bind the previous table with this mini-table of totals
mdata %>%
filter(!is.na(state) & year != "Missing") %>%
group_by(state) %>%                            # Grouped only by outcome, not by hospital
summarise(
N = n(),                                       # Number of rows for whole dataset
case_value = mean(cases))) %>%     # Median CT for whole dataset
# Pivot wider and format
########################
table  # print
print(table)
table <- mdata %>%
tabyl(year, state) %>%
adorn_totals(where = "both")
adorn_percentages(denominator = "col") %>%
adorn_pct_formatting() %>%
adorn_ns(position = "front") %>%
adorn_title( row_name = "year",
col_name ="state")
table <- mdata %>%
tabyl(year, state) %>%
adorn_totals(where = "both")
#adorn_percentages(denominator = "col") %>%
adorn_pct_formatting() %>%
adorn_ns(position = "front") %>%
adorn_title( row_name = "year",
col_name ="state")
table <- mdata %>%
tabyl(year, state) %>%
adorn_totals(where = "both")
#adorn_percentages(denominator = "col") %>%
#adorn_pct_formatting() %>%
#adorn_ns(position = "front") %>%
adorn_title( row_name = "year",
col_name ="state")
correlation_table <- mdata %>%
group_by(state, year) %>%
do(calculate_group_correlations(.))
mdata <- monthly_data %>%
clean_names() %>%
rename( m_tempmax = tempmax,
m_tempmin = tempmin,
m_temp = temp,
m_humid = humidity,
m_precip = precip,
m_precov = precipcover)
mdata$state <- as.factor(mdata$state)
mdata$year <- as.factor(mdata$year)
mdata$cases <- as.numeric(mdata$cases)
mdata$month <- as.factor(mdata$month)
glimpse(mdata)
View(mdata)
#Summarizing and Grouping data----------------------------------------------------------------
describe(mdata)
calculate_group_correlations <- function(mdata) {
correlations <- mdata %>%
select(cases, m_tempmin, m_temp, m_tempmax, m_humid, m_precip, m_precov) %>%
correlate(method = "spearman")
return(correlations)
}
#applying the function to create a grouped correlation table by state and year
correlation_table <- mdata %>%
group_by(state, year) %>%
do(calculate_group_correlations(.))
add_p()
calculate_group_correlations <- function(mdata) {
correlations <- mdata %>%
select(cases, m_tempmin, m_temp, m_tempmax, m_humid, m_precip, m_precov) %>%
correlate(method = "spearman")
return(correlations)
}
#applying the function to create a grouped correlation table by state and year
correlation_table <- mdata %>%
group_by(state, year) %>%
do(calculate_group_correlations(.), add_p())
calculate_group_correlations <- function(mdata) {
correlations <- mdata %>%
select(cases, m_tempmin, m_temp, m_tempmax, m_humid, m_precip, m_precov) %>%
correlate(method = "spearman", add_p())
return(correlations)
}
#applying the function to create a grouped correlation table by state and year
correlation_table <- mdata %>%
group_by(state, year) %>%
do(calculate_group_correlations(.) )
calculate_group_correlations <- function(mdata) {
correlations <- mdata %>%
select(cases, m_tempmin, m_temp, m_tempmax, m_humid, m_precip, m_precov) %>%
correlate(method = "spearman")
add_p()
return(correlations)
}
#applying the function to create a grouped correlation table by state and year
correlation_table <- mdata %>%
group_by(state, year) %>%
do(calculate_group_correlations(.) )
calculate_group_correlations <- function(mdata) {
correlations <- mdata %>%
select(cases, m_tempmin, m_temp, m_tempmax, m_humid, m_precip, m_precov) %>%
correlate(method = "spearman")%>%
add_p()
return(correlations)
}
#applying the function to create a grouped correlation table by state and year
correlation_table <- mdata %>%
group_by(state, year) %>%
do(calculate_group_correlations(.) )
calculate_group_correlations <- function(mdata) {
correlations <- mdata %>%
select(cases, m_tempmin, m_temp, m_tempmax, m_humid, m_precip, m_precov) %>%
add_p()%>%
correlate(method = "spearman")
return(correlations)
}
#applying the function to create a grouped correlation table by state and year
correlation_table <- mdata %>%
group_by(state, year) %>%
do(calculate_group_correlations(.) )
tbl_strata <-
mdata %>%
mutate(year = paste("Year", year)) %>%
tbl_strata(
strata= year,
~tbl_summary(.x, by = state)%>%
modify_header(all_stat_cols() ~ "**{level}**")
)
print(tbl_strata)
tbl_strata <-
mdata %>% select(!c(month)) %>%
mutate(year = paste("Year", year)) %>%
tbl_strata(
strata= year,
~tbl_summary(.x, by = state)%>%
modify_header(all_stat_cols() ~ "**{level}**")
)
print(tbl_strata)
tbl_strata <-
mdata %>% select(!c(month)) %>%
mutate(year = paste("Year", year)) %>%
tbl_strata(
strata= year,
~tbl_summary(.x, by = state, statistic = all_continuous() ~ "{mean} ({sd}")%>%
modify_header(all_stat_cols() ~ "**{level}**")
)
print(tbl_strata)
ggsave("tbl_strata.png", plot = plot, width = 6, height = 4)
ggsave("tbl_strata.png")
doc <-read_docx()
doc <- doc %>%
body_add_img(src= "tbl_strata.png", width = 6, height = 4, style = "centered" )
print(doc, target = "plot_document.docx")
mdata %>% select(!c(month, year)) %>%
tbl_summary(by = state, statistic = list
(all_continuous() ~ "{mean} ({sd})" ), digits = all_continuous() ~2) %>%
add_p() %>% add_overall()
tbl_strata <-
mdata %>% select(!c(month)) %>%
mutate(year = paste("Year", year)) %>%
tbl_strata(
strata= year,
~tbl_summary(.x, by = state, statistic = all_continuous() ~ "{mean} ({sd}")%>%
add_p() %>% add_overall()
modify_header(all_stat_cols() ~ "**{level}**")
tbl_strata <-
mdata %>% select(!c(month)) %>%
mutate(year = paste("Year", year)) %>%
tbl_strata(
strata= year,
~tbl_summary(.x, by = state, statistic = all_continuous() ~ "{mean} ({sd}")%>%
add_p() %>%
modify_header(all_stat_cols() ~ "**{level}**")
)
print(tbl_strata)
tbl_strata <-
mdata %>% select(!c(month)) %>%
mutate(year = paste("Year", year)) %>%
tbl_strata(
strata= year,
~tbl_summary(.x, by = state, statistic = all_continuous() ~ "{mean} ({sd}")%>%
add_p() %>%
modify_header(all_stat_cols() ~ "**{level}**")
) theme_gtsummary_compact()
tbl_strata <-
mdata %>% select(!c(month)) %>%
mutate(year = paste("Year", year)) %>%
tbl_strata(
strata= year,
~tbl_summary(.x, by = state, statistic = all_continuous() ~ "{mean} ({sd}")%>%
add_p() %>%
modify_header(all_stat_cols() ~ "**{level}**")
theme_gtsummary_compact() )
tbl_strata <-
mdata %>% select(!c(month)) %>%
mutate(year = paste("Year", year)) %>%
tbl_strata(
strata= year,
~tbl_summary(.x, by = state, statistic = all_continuous() ~ "{mean} ({sd}")%>%
add_p() %>%
modify_header(all_stat_cols() ~ "**{level}**"),
theme_gtsummary_compact() )
print(tbl_strata)
mdata %>% select(!c(month, year)) %>%
tbl_summary(by = state, statistic = list
(all_continuous() ~ "{mean} ({sd})" ), digits = all_continuous() ~2) %>%
add_p() %>% add_overall()
mdata$month_year <- with(mdata, interaction(month, year, drop = TRUE))
# Reorder the levels of month_year
mdata$month_year <- factor(mdata$month_year, levels = unique(mdata$month_year))
# Create a bar chart with different colors for each year
ggplot(data = mdata, aes(x = month_year, y = cases, fill = as.factor(year))) +
geom_bar(stat = "identity", width = 0.5) +
facet_wrap(~ state) +
labs(x = "Month", y = "Cases", title = "Cases by Month and Year") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
scale_fill_discrete(name = "Year") + theme_bw()
mdata$month <- factor(mdata$month, levels = month.name)
# Create the plot with vertical month labels
ggplot(data = mdata, aes(x = month, y = cases, fill = state)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ year) +
labs(title = "Monthly Case Count Across States") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))+theme_bw()
#line graph of cases by month across years
ggplot(data = mdata, aes(x = month, y = cases, group = interaction(state, year), color = year)) +
geom_line() + facet_wrap(~ state) + labs(x = "Month", y = "cases", title = "Cases by Month") +
theme_bw()
ggplot(data = mdata, aes(x = month, y = m_temp, group = interaction(state, year), color = year)) +
geom_line() + geom_point() + facet_wrap(~ state) + labs(x = "Month", y = "temperature", title = "Temperature by Month") +
theme_bw()
ggplot(data = mdata, aes(x = month, y = cases, fill = state)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ year) +
labs(title = "Monthly Case Count Across States") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))+theme_bw()
ggplot(data = mdata, aes(x = cases, y = month, fill = state)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ year) +
labs(title = "Monthly Case Count Across States") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))+theme_bw()
dev.new(width=12, height=8)
ggplot(data = mdata, aes(x = month, y = cases, group = interaction(state, year), color = year)) +
geom_line() + facet_wrap(~ state) + labs(x = "Month", y = "cases", title = "Cases by Month") +
theme_bw()
dev.new(width=14, height=6)
ggplot(data = mdata, aes(x = month, y = cases, group = interaction(state, year), color = year)) +
geom_line() + facet_wrap(~ state) + labs(x = "Month", y = "cases", title = "Cases by Month") +
theme_bw()
dev.new(width=16, height=5)
ggplot(data = mdata, aes(x = month, y = cases, group = interaction(state, year), color = year)) +
geom_line() + facet_wrap(~ state) + labs(x = "Month", y = "cases", title = "Cases by Month") +
theme_bw()
dev.new(width=18, height=5)
ggplot(data = mdata, aes(x = month, y = cases, group = interaction(state, year), color = year)) +
geom_line() + facet_wrap(~ state) + labs(x = "Month", y = "cases", title = "Cases by Month") +
theme_bw()
windows(width=18, height=5)
ggplot(data = mdata, aes(x = month, y = cases, group = interaction(state, year), color = year)) +
geom_line() + facet_wrap(~ state) + labs(x = "Month", y = "cases", title = "Cases by Month") +
theme_bw()
windows(width=20, height=7)
ggplot(data = mdata, aes(x = month, y = cases, group = interaction(state, year), color = year)) +
geom_line() + facet_wrap(~ state) + labs(x = "Month", y = "cases", title = "Cases by Month") +
theme_bw()
ggplot(data = mdata, aes(x = cases, y = month, group = interaction(state, year), color = year)) +
geom_line() + facet_wrap(~ state) + labs(x = "Month", y = "cases", title = "Cases by Month") +
theme_bw()
ggplot(data = mdata, aes(x = month, y = cases, group = interaction(state, year), color = year)) +
geom_line() + facet_wrap(~ state) + labs(x = "Month", y = "cases", title = "Cases by Month") +
theme_bw()
ggplot(data = mdata, aes(x = month, y = cases, group = interaction(state, year), color = year)) +
geom_line() + facet_wrap(~ state) + labs(x = "Month", y = "cases", title = "Cases by Month") +
theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = mdata, aes(x = month, y = m_temp, group = interaction(state, year), color = year)) +
geom_line() + geom_point() + facet_wrap(~ state) + labs(x = "Month", y = "temperature", title = "Temperature by Month") +
theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = mdata, aes(x = month, y = m_precip, group = interaction(state, year), color = year)) +
geom_line() + geom_point() + facet_wrap(~ state) + labs(x = "Month", y = "precipitation", title = "Precipitation by Month") +
theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = mdata, aes(x = month, y = m_humid, group = interaction(state, year), color = year)) +
geom_line() + geom_point() + facet_wrap(~ state) + labs(x = "Month", y = "humidity", title = "Humidity by Month") +
theme_bw() +theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = mdata, aes(x = m_precip, y = cases, color = year)) + geom_point(size=3) +
facet_wrap(~ state) +
labs(x = "precipitation", y = "cases", title = "Cases against Precipitation by State") +
geom_smooth(method =lm, se = F) + theme_bw()
ggplot(data = mdata, aes(x = m_precov, y = cases, color = year)) + geom_point() +
facet_wrap(~ state) +
labs(x = "precipitation cover", y = "cases", title = "Cases against Precipitation cover by State") +
geom_smooth(method =lm, se = F) + theme_bw()
ggplot(data = mdata, aes(x = m_humid, y = cases, color = year)) + geom_point() +
facet_wrap(~ state) +
labs(x = "humidity", y = "cases", title = "Cases against humidity by State") +
geom_smooth(method =lm, se = F) + theme_bw()
ggplot(data = mdata, aes(x = m_temp, y = cases, color = year)) + geom_point() +
facet_wrap(~ state) +
labs(x = "temperature", y = "cases", title = "Cases against Temperature by State") +
geom_smooth(method =lm, se = F) + theme_bw()
ggplot(data = mdata, aes(x = m_tempmin, y = cases, color = state)) + geom_point() +
facet_wrap(~ year) +
labs(x = "minimum temperature", y = "cases", title = "Cases against Minimum Temperature by year") +
geom_smooth(method =lm, se = F) + theme_bw()
ggplot(data = mdata, aes(x = m_tempmin, y = cases, color = year)) + geom_point() +
facet_wrap(~ state) +
labs(x = "minimum temperature", y = "cases", title = "Cases against Minimum Temperature by year") +
geom_smooth(method =lm, se = F) + theme_bw()
ggplot(data = mdata, aes(x = m_tempmax, y = cases, color = year)) + geom_point() +
facet_wrap(~ state) +
labs(x = "maximum temperature", y = "cases", title = "Cases against Maximum Temperature by year")+
geom_smooth(method =lm, se = F) + theme_bw()
